<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>主题切换功能修复 - Moreyu's Blog ✨</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@11.9.0/styles/github-dark.min.css">
  <style>
    /* 文章目录样式 */
    .toc {
      position: fixed;
      right: 2rem;
      top: 6rem;
      width: 280px;
      max-height: calc(100vh - 8rem);
      overflow-y: auto;
      background: var(--card-bg);
      border-radius: 8px;
      padding: 1rem;
      box-shadow: var(--shadow);
      font-size: 0.9rem;
      z-index: 100;
    }
    
    .toc-title {
      font-weight: bold;
      margin-bottom: 0.5rem;
      color: var(--primary);
      font-size: 1.1rem;
    }
    
    .toc ul {
      list-style: none;
      padding-left: 1rem;
      margin: 0;
    }
    
    .toc li {
      margin: 0.5rem 0;
      line-height: 1.4;
    }
    
    .toc a {
      color: var(--text-light);
      text-decoration: none;
      transition: all 0.2s;
      display: block;
      padding: 0.2rem 0.5rem;
      border-radius: 4px;
    }
    
    .toc a:hover {
      color: var(--primary);
      background: var(--bg);
    }
    
    .toc a.active {
      color: var(--primary);
      font-weight: bold;
      background: var(--bg);
    }

    /* 阅读进度 */
    .reading-progress {
      position: fixed;
      top: 0;
      right: 0;
      width: 2px;
      height: 100vh;
      background: var(--border);
      z-index: 1000;
    }
    
    .reading-progress-bar {
      width: 100%;
      background: var(--primary);
      height: 0;
      transition: height 0.2s;
    }

    /* 代码块样式 */
    pre {
      position: relative;
      border-radius: 8px;
      margin: 1.5rem 0;
      background: var(--card-bg) !important;
      padding: 1rem !important;
    }
    
    .copy-button {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      padding: 0.3rem 0.6rem;
      background: var(--card-bg);
      border: 1px solid var(--border);
      border-radius: 4px;
      color: var(--text-light);
      font-size: 0.8rem;
      cursor: pointer;
      transition: all 0.2s;
      opacity: 0;
    }
    
    pre:hover .copy-button {
      opacity: 1;
    }
    
    .copy-button:hover {
      background: var(--primary);
      color: white;
      border-color: var(--primary);
    }

    /* 文章内容样式 */
    .post-content {
      max-width: 800px;
      margin: 2rem auto;
      padding: 2rem;
    }
    
    .post-content h2 {
      margin-top: 2.5rem;
      margin-bottom: 1.5rem;
      color: var(--primary);
      font-size: 1.8rem;
    }
    
    .post-content h3 {
      margin-top: 2rem;
      margin-bottom: 1rem;
      color: var(--text);
      font-size: 1.5rem;
    }
    
    .post-content p {
      line-height: 1.8;
      margin: 1.2rem 0;
      color: var(--text);
    }
    
    .post-content img {
      max-width: 100%;
      border-radius: 8px;
      margin: 1.5rem 0;
    }
    
    .post-content code {
      background: var(--card-bg);
      padding: 0.2rem 0.4rem;
      border-radius: 4px;
      font-family: 'Maple Mono', monospace;
      font-size: 0.9em;
      color: var(--primary);
    }
    
    .post-content pre code {
      background: none;
      padding: 0;
      color: var(--text);
      font-size: 0.9rem;
      line-height: 1.5;
    }
    
    .post-meta {
      display: flex;
      gap: 1.5rem;
      margin-bottom: 2rem;
      color: var(--text-light);
      font-size: 0.9rem;
    }
    
    .post-tags {
      margin-top: 3rem;
      display: flex;
      gap: 0.8rem;
      flex-wrap: wrap;
    }
    
    .tag {
      background: var(--card-bg);
      color: var(--primary);
      padding: 0.3rem 0.8rem;
      border-radius: 20px;
      font-size: 0.9rem;
      transition: all 0.2s;
    }
    
    .tag:hover {
      background: var(--primary);
      color: white;
      transform: translateY(-2px);
    }

    /* 返回首页按钮 */
    .back-home {
      position: fixed;
      left: 2rem;
      top: 2rem;
      background: var(--card-bg);
      border: 2px solid var(--primary);
      color: var(--primary);
      padding: 0.8rem 1.5rem;
      border-radius: 30px;
      font-size: 1.1rem;
      font-weight: bold;
      text-decoration: none;
      transition: all 0.3s;
      z-index: 1000;
      box-shadow: var(--shadow);
    }
    
    .back-home:hover {
      background: var(--primary);
      color: white;
      transform: translateY(-2px);
    }

    @media (max-width: 768px) {
      .back-home {
        left: 1rem;
        top: 1rem;
        padding: 0.6rem 1.2rem;
        font-size: 1rem;
      }
      
      .post-content {
        padding: 1rem;
      }
    }

    @media (max-width: 1200px) {
      .toc {
        display: none;
      }
    }
  </style>
</head>
<body>
  <div class="reading-progress">
    <div class="reading-progress-bar"></div>
  </div>

  <a href="/" class="back-home">
    <i class="fas fa-arrow-left"></i> 返回首页
  </a>

  <main class="post-content">
    <article class="card">
      <div class="post-meta">
        <span><i class="far fa-calendar"></i> 2025-03-20</span>
        <span><i class="far fa-clock"></i> 阅读时间：11分钟</span>
        <span><i class="far fa-folder"></i> 分类：未分类</span>
      </div>

      <h1>主题切换功能修复</h1>

      <div class="reading-progress">
    <div class="reading-progress-bar"></div>
  </div>
  
  <button class="theme-toggle" aria-label="切换主题">
    <i class="fas fa-moon"></i>
  </button>
  
  <h1 class="gradient-text">主题切换功能修复</h1>
  
  

  

  <div class="share-menu">
    <button class="share-button" title="分享到微信" onclick="shareToWeChat()">
      <i class="fab fa-weixin"></i>
    </button>
    <button class="share-button" title="分享到微博" onclick="shareToWeibo()">
      <i class="fab fa-weibo"></i>
    </button>
    <button class="share-button" title="分享到 Twitter" onclick="shareToTwitter()">
      <i class="fab fa-twitter"></i>
    </button>
    <button class="share-button" title="复制链接" onclick="copyPageUrl()">
      <i class="fas fa-link"></i>
    </button>
  </div>

  <main class="post-content">
    <div class="card">
      <div class="post-meta">
        <span><i class="far fa-calendar"></i> 2025-03-20</span>
        <span><i class="far fa-clock"></i> 阅读时间：8分钟</span>
        <span><i class="far fa-folder"></i> 分类：未分类</span>
      </div>

      <div class="reading-progress">
    <div class="reading-progress-bar"></div>
  </div>
  
  <button class="theme-toggle" aria-label="切换主题">
    <i class="fas fa-moon"></i>
  </button>
  
  <h1 class="gradient-text">主题切换功能修复 ✨</h1>
  
  

  

  <div class="share-menu">
    <button class="share-button" title="分享到微信" onclick="shareToWeChat()">
      <i class="fab fa-weixin"></i>
    </button>
    <button class="share-button" title="分享到微博" onclick="shareToWeibo()">
      <i class="fab fa-weibo"></i>
    </button>
    <button class="share-button" title="分享到 Twitter" onclick="shareToTwitter()">
      <i class="fab fa-twitter"></i>
    </button>
    <button class="share-button" title="复制链接" onclick="copyPageUrl()">
      <i class="fas fa-link"></i>
    </button>
  </div>

  <main class="post-content">
    <div class="card">
      <div class="post-meta">
        <span><i class="far fa-calendar"></i> 2024-03-21</span>
        <span><i class="far fa-clock"></i> 阅读时间：5分钟</span>
        <span><i class="far fa-folder"></i> 分类：技术</span>
      </div>

      <h2 id="问题描述">问题描述</h2>
      <p>在开发过程中，发现网站的主题切换功能在不同页面之间存在不一致的问题。具体表现为：</p>
      <ul>
        <li>首页和文章页面的主题切换不同步</li>
        <li>主题设置在不同页面刷新后丢失</li>
        <li>样式变量定义重复且不统一</li>
      </ul>

      <h2 id="解决方案">解决方案</h2>
      <p>为了解决这些问题，我们采取了以下措施：</p>

      <h3 id="创建独立的主题控制脚本">1. 创建独立的主题控制脚本</h3>
      <p>创建了 <code>js/theme.js</code> 文件，统一管理主题切换逻辑：</p>
      <pre><code>// 主题切换逻辑
const themeToggle = document.querySelector('.theme-toggle');
const icon = themeToggle.querySelector('i');

// 从 localStorage 获取主题设置
const currentTheme = localStorage.getItem('theme') || 'light';
document.documentElement.setAttribute('data-theme', currentTheme);
icon.className = currentTheme === 'light' ? 'fas fa-moon' : 'fas fa-sun';

// 主题切换事件处理
themeToggle.addEventListener('click', () =&gt; {
  const currentTheme = document.documentElement.getAttribute('data-theme');
  const newTheme = currentTheme === 'light' ? 'dark' : 'light';
  
  document.documentElement.setAttribute('data-theme', newTheme);
  localStorage.setItem('theme', newTheme);
  
  icon.className = newTheme === 'light' ? 'fas fa-moon' : 'fas fa-sun';
});</code></pre>

      <h3 id="创建全局样式文件">2. 创建全局样式文件</h3>
      <p>创建了 <code>css/style.css</code> 文件，统一管理主题相关的样式变量：</p>
      <pre><code>:root[data-theme="light"] {
  --primary: #007AFF;
  --primary-light: #47A1FF;
  --primary-dark: #0055B3;
  --text: #333333;
  --text-light: #666666;
  --bg: #FFFFFF;
  --card-bg: #F5F5F7;
  --border: #E5E5EA;
  --shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  --shadow-hover: 0 4px 12px rgba(0, 0, 0, 0.15);
}

:root[data-theme="dark"] {
  --primary: #0A84FF;
  --primary-light: #5E5CE6;
  --primary-dark: #0071E3;
  --text: #FFFFFF;
  --text-light: #AEAEB2;
  --bg: #000000;
  --card-bg: #1C1C1E;
  --border: #38383A;
  --shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  --shadow-hover: 0 4px 12px rgba(0, 0, 0, 0.4);
}</code></pre>

      <h3 id="创建文章页面模板">3. 创建文章页面模板</h3>
      <p>创建了 <code>posts/template.html</code> 作为文章页面的基础模板，统一页面结构和样式。</p>

      <h2 id="改进效果">改进效果</h2>
      <p>通过以上改进，我们实现了：</p>
      <ul>
        <li>主题切换在所有页面保持同步</li>
        <li>主题设置通过 localStorage 持久化存储</li>
        <li>样式变量统一管理，避免重复定义</li>
        <li>文章页面模板化，便于维护和扩展</li>
      </ul>

      <h2 id="使用说明">使用说明</h2>
      <p>创建新文章时：</p>
      <ol>
        <li>使用 <code>posts/template.html</code> 作为模板</li>
        <li>将文章内容放在 <code>&lt;main class="post-content"&gt;</code> 标签内</li>
        <li>更新必要的元数据（标题、日期、分类等）</li>
      </ol>

      <h2 id="后续优化">后续优化</h2>
      <p>计划进行以下优化：</p>
      <ul>
        <li>添加主题切换动画效果</li>
        <li>支持系统主题自动跟随</li>
        <li>优化暗色主题配色方案</li>
        <li>添加主题切换快捷键支持</li>
      </ul>

      <div class="post-tags">
        <span class="tag">主题切换</span>
        <span class="tag">CSS变量</span>
        <span class="tag">JavaScript</span>
        <span class="tag">用户体验</span>
      </div>
    </div>
  </main>

      <div class="post-tags">
        <span class="tag">主题切换</span>
<span class="tag">CSS变量</span>
<span class="tag">JavaScript</span>
<span class="tag">用户体验</span>
      </div>
    </div>
  </main>

      <div class="post-tags">
        <span class="tag">主题切换</span>
<span class="tag">CSS变量</span>
<span class="tag">JavaScript</span>
<span class="tag">用户体验</span>
<span class="tag">主题切换</span>
<span class="tag">CSS变量</span>
<span class="tag">JavaScript</span>
<span class="tag">用户体验</span>
      </div>
    </article>
  </main>

  <aside class="toc">
    <div class="toc-title">📚 目录</div>
    <ul>
      <li><a href="#问题描述">问题描述</a></li>
<li><a href="#解决方案">解决方案</a></li>
  <li><a href="#创建独立的主题控制脚本">创建独立的主题控制脚本</a></li>
  <li><a href="#创建全局样式文件">创建全局样式文件</a></li>
  <li><a href="#创建文章页面模板">创建文章页面模板</a></li>
<li><a href="#改进效果">改进效果</a></li>
<li><a href="#使用说明">使用说明</a></li>
<li><a href="#后续优化">后续优化</a></li>
    </ul>
  </aside>

  <script src="https://cdn.jsdelivr.net/npm/highlight.js@11.9.0/highlight.min.js"></script>
  <script>
    // 阅读进度
    const progressBar = document.querySelector('.reading-progress-bar');
    window.addEventListener('scroll', () => {
      const winScroll = document.documentElement.scrollTop;
      const height = document.documentElement.scrollHeight - document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      progressBar.style.height = scrolled + '%';
    });

    // 代码高亮和复制功能
    document.querySelectorAll('pre code').forEach((block) => {
      hljs.highlightElement(block);
      
      const button = document.createElement('button');
      button.className = 'copy-button';
      button.textContent = '复制';
      
      button.addEventListener('click', async () => {
        const code = block.textContent;
        await navigator.clipboard.writeText(code);
        button.textContent = '已复制!';
        setTimeout(() => {
          button.textContent = '复制';
        }, 2000);
      });
      
      block.parentElement.appendChild(button);
    });

    // 目录高亮
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const id = entry.target.getAttribute('id');
        const tocLink = document.querySelector(`.toc a[href="#${id}"]`);
        if (tocLink) {
          if (entry.intersectionRatio > 0) {
            document.querySelectorAll('.toc a').forEach(link => link.classList.remove('active'));
            tocLink.classList.add('active');
          }
        }
      });
    }, { rootMargin: '0px 0px -80% 0px' });

    document.querySelectorAll('h2[id], h3[id]').forEach((section) => {
      observer.observe(section);
    });
  </script>
</body>
</html> 